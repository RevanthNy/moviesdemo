/**
 * Resource Controller for the movies class to map the requests by creating end points 
 */
package com.moviesdemo.controller;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.moviesdemo.model.Movie;
import com.moviesdemo.repository.MoviesRepository;

/**
 * @author Revanth Reddy
 *
 */
@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MoviesController {
	 final static Logger logger = LoggerFactory.getLogger(MoviesController.class);
	@Autowired // This means to get the bean called moviesRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private MoviesRepository moviesRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewMovieOrShow (@RequestParam int id, @RequestParam String title
			, @RequestParam String synopsis, @RequestParam String releasedYear
			, @RequestParam String mediaType) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Movie n = new Movie();
		n.setId(id);
		n.setTitle(title);
		n.setSynopsis(synopsis);
		n.setReleasedYear(releasedYear);
		n.setMediaType(mediaType);
		moviesRepository.save(n);
		return "Saved";
	}
	

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Movie> getAllMovies() {
		// This returns a JSON or XML with the movies
		return moviesRepository.findAll();
	}
	
	@GetMapping(path="/movie/{id}")
	public @ResponseBody Optional<Movie> getMovieById(@PathVariable(value= "id") Integer id){
		//This returns movie record
		return moviesRepository.findByIdAndMediaType(id,"movie");
	}
	
	@GetMapping(path="/show/{id}")
	public @ResponseBody Optional<Movie> getShowById(@PathVariable(value= "id") Integer id){
		//This returns show record
		return moviesRepository.findByIdAndMediaType(id,"show");
	}
	
	@GetMapping(path="/search")
	public @ResponseBody Iterable<Movie> getAllMoviesMatched(@RequestParam(value="title")String title,
			@RequestParam(value="pageNumber")Integer pageNumber){
		//This return movie records that matched the input string

		@SuppressWarnings("deprecation")
		Sort sort = new Sort(new Sort.Order(Direction.ASC, "id"));
		@SuppressWarnings("deprecation")
		Pageable pageable = new PageRequest(pageNumber-1,10, sort);
		return moviesRepository.findByTitleIgnoreCaseContaining(title,pageable);
	}
	
	@GetMapping(path="/delete/{id}")
	public @ResponseBody void deleteByGivenId(@PathVariable(value= "id") Integer id){
		//This deletes record
		moviesRepository.deleteById(id);
	}
	
}